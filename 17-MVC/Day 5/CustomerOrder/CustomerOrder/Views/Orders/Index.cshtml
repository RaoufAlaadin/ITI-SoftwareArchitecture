@model IEnumerable<CustomerOrder.Models.Order>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@using (Html.BeginForm("Index", "Orders", FormMethod.Post))
{

    var selectedCustomerId = int.Parse(Request.Form["CustomerID"] ?? "0");
    <div>
        @*  Note:
            The null check is important for this case,
            but I didn't need it when I had a separate filter view.
            '*@
        @if (ViewBag.Customers != null)
        {
            @Html.DropDownList("CustomerID", new SelectList(ViewBag.Customers, "ID", "Name", selectedCustomerId), htmlAttributes: new { @class = "form-control" })
        }
        @*else
        {
            <p>No orders found.</p>
        }*@
    </div>

    <div>
        <input type="submit" value="Filter" class="btn btn-default" />
    </div>
}


<p>
    @Html.ActionLink("Create New Order", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Customer.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TotalPrice)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Customer.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalPrice)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
    }

</table>



<div>
    @Html.ActionLink("Back to List", "Index")
</div>